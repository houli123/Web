/*
* 动态规划 Dynamic Programming
*
* 动态规划三要素
*
* 重叠子问题
* 最优子结构
* 状态转移方程
*
* */

/*
*
* 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
* 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
* 注意：给定 n 是一个正整数。
*
* 重叠子问题
* 切换机器思维，自底向上思考。
* 爬第 n 阶楼梯的方法数量，等于两部分之和：
*
* 爬上 n-1 阶楼梯的方法数量
* 爬上 n-2 阶楼梯的方法数量
*
* 最优子结构
* 子问题的最优解能够推出原问题的优解。
*
* 状态转移方程
* dp[n] = dp[n-1] + dp[n-2]
*
* 具备三要素，确认边界条件，初始化状态，开始切菜：
*
* dp[0] = 1
* dp[1] = 1
* */
const climbStairs = function(n) {
    const dp = [];
    dp[0] = 1;
    dp[1] = 1;
    for (let i = 2; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
};

console.log(climbStairs(3));

/*
* 在此基础上，我们还可以通过压缩空间来对算法进行优化。
* 因为 dp[i]只与 dp[i-1] 和 dp[i-2] 有关，没有必要存储所有出现过的 dp 项，
* 只用两个临时变量去存储这两个状态即可。
*
* */

const climbStairs02 = function (n) {
    let a1 = 1;
    let a2 = 2;
    for(let i= 2; i< n; i++){
        [a1,a2] = [a2, a1+a2]
    }
    return a2
};

console.log(climbStairs02(3));

/*
* 贪心算法 Greedy
*
* 贪心算法是动态规划算法的一个子集，可以更高效解决一部分更特殊的问题。
* 实际上，用贪心算法解决问题的思路，并不总能给出最优解。因为它在每一
* 步的决策中，选择目前最优策略，不考虑全局是不是最优。
*
* */

/*
*
* 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多
* 只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足
* 胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj >= gi ，
* 我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满
* 足越多数量的孩子，并输出这个最大数值。
*
* 注意：
*
* 你可以假设胃口值为正。
* 一个小朋友最多只能拥有一块饼干。
*
* 输入: [1,2,3], [1,1]
*
* 输出: 1
*
* 解释:
* 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
* 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
* 所以你应该输出1。
*
* 输入: [1,2], [1,2,3]
* 输出: 2
*
* 解释:
* 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
* 你拥有的饼干数量和尺寸都足以让所有孩子满足。
* 所以你应该输出2.
*
* */

const findContentChildren = function (g, s) {
    // 排序
    g = g.sort((a, b) => a - b);
    s = s.sort((a, b) => a - b);
    let gi = 0; // 胃口值
    let sj = 0; // 饼干尺寸
    let res = 0;
    while (gi < g.length && sj < s.length) {
        if (s[sj] >= g[gi]) {
            gi++;
            sj++;
            res++;
        } else {
            sj++;
        }
    }
    return res;
};

console.log(findContentChildren([1,2], [1,2,3]))



